# -*- coding: utf-8 -*-
"""hybridplant

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yBnHljbG3s7Vl384SVjbejYUImMkGX8A
"""

import pandas as pd
import numpy as np

# Create a synthetic dataset
data = {
    'Parent1_Gene': np.random.choice(['A', 'B', 'C'], size=100),
    'Parent2_Gene': np.random.choice(['X', 'Y', 'Z'], size=100),
    'Soil_pH': np.random.uniform(5.5, 7.5, size=100),
    'Rainfall_mm': np.random.uniform(300, 1500, size=100),
    'Hybrid_Variety': np.random.choice(['Hybrid1', 'Hybrid2', 'Hybrid3'], size=100)
}

df = pd.DataFrame(data)

# Save to CSV
df.to_csv('synthetic_plant_data.csv', index=False)
print("Synthetic dataset created.")

# Load the dataset
df = pd.read_csv('synthetic_plant_data.csv')

# Encode categorical variables
df = pd.get_dummies(df, columns=['Parent1_Gene', 'Parent2_Gene'], drop_first=True)

# Separate features and target
X = df.drop('Hybrid_Variety', axis=1)
y = df['Hybrid_Variety']

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Load the dataset
df = pd.read_csv('synthetic_plant_data.csv')

# Encode categorical variables
df = pd.get_dummies(df, columns=['Parent1_Gene', 'Parent2_Gene'], drop_first=True)

# Separate features and target
X = df.drop('Hybrid_Variety', axis=1)
y = df['Hybrid_Variety']

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Train the model
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

plt.figure(figsize=(12,8))
plot_tree(model, filled=True, feature_names=X.columns, class_names=model.classes_)
plt.title("Decision Tree for Hybrid Plant Prediction")
plt.show()

!pip install Flask flask-ngrok

# Create and train the model
model = DecisionTreeClassifier() #Removed extra indentation
model.fit(X_train, y_train)

# Save the model using joblib
joblib.dump(model, 'plant_model')

# ... your existing Flask app code ...

!ngrok --version

!ngrok http 5000

# ... your existing code ...

# Create and train the model
model = DecisionTreeClassifier() #Removed extra indentation
model.fit(X_train, y_train)

# Save the model using joblib
joblib.dump(model, 'plant_model')

# ... your existing Flask app code ...